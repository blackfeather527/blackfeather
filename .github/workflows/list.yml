name: GitHub Actions Demo
on: [push]
jobs:
  Get-All-List:
    runs-on: ubuntu-latest
    env:
      GEOIP: https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat
      GEOSITE: https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat
      GFWLIST: https://raw.github.com/gfwlist/gfwlist/master/gfwlist.txt
      CHNLIST: https://raw.github.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf
      APNICIP: http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest
      OISD: https://dbl.oisd.nl/
      MOSDNS: https://github.com/IrineSistiana/mosdns/releases/download/v2.1.2/mosdns-linux-amd64.zip
      TZ: Asia/Shanghai
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.34'

      - name: Update list
        id: update
        run: |
          set -o errexit
          set -o pipefail

          gfwlist_txt_perl_script_string='
            if (/URL Keywords/i) { $null = <> until $null =~ /^!/ }
               s#^\s*+$|^!.*+$|^@@.*+$|^\[AutoProxy.*+$|^/.*/$##i;
               s@^\|\|?|\|$@@;
               s@^https?:/?/?@@i;
               s@(?:/|%).*+$@@;
               s@\*[^.*]++$@\n@;
               s@^.*?\*[^.]*+(?=[^*]+$)@@;
               s@^\*?\.|^.*\.\*?$@@;
               s@(?=[^0-9a-zA-Z.-]).*+$@@;
               s@^\d+\.\d+\.\d+\.\d+(?::\d+)?$@@;
               s@^[^.]++$@@;
               s@^\s*+$@@
          '
          gfwlist_txt_append_domain_names() {
            printf "twimg.edgesuite.net\n"
            printf "blogspot.ae\nblogspot.al\nblogspot.am\nblogspot.ba\nblogspot.be\nblogspot.bg\nblogspot.bj\nblogspot.ca\nblogspot.cat\nblogspot.cf\nblogspot.ch\nblogspot.cl\nblogspot.co.at\nblogspot.co.id\nblogspot.co.il\nblogspot.co.ke\nblogspot.com\nblogspot.com.ar\nblogspot.com.au\nblogspot.com.br\nblogspot.com.by\nblogspot.com.co\nblogspot.com.cy\nblogspot.com.ee\nblogspot.com.eg\nblogspot.com.es\nblogspot.com.mt\nblogspot.com.ng\nblogspot.com.tr\nblogspot.com.uy\nblogspot.co.nz\nblogspot.co.uk\nblogspot.co.za\nblogspot.cv\nblogspot.cz\nblogspot.de\nblogspot.dk\nblogspot.fi\nblogspot.fr\nblogspot.gr\nblogspot.hk\nblogspot.hr\nblogspot.hu\nblogspot.ie\nblogspot.in\nblogspot.is\nblogspot.it\nblogspot.jp\nblogspot.kr\nblogspot.li\nblogspot.lt\nblogspot.lu\nblogspot.md\nblogspot.mk\nblogspot.mr\nblogspot.mx\nblogspot.my\nblogspot.nl\nblogspot.no\nblogspot.pe\nblogspot.pt\nblogspot.qa\nblogspot.re\nblogspot.ro\nblogspot.rs\nblogspot.ru\nblogspot.se\nblogspot.sg\nblogspot.si\nblogspot.sk\nblogspot.sn\nblogspot.td\nblogspot.tw\nblogspot.ug\nblogspot.vn\n"
            printf "google.ac\ngoogle.ad\ngoogle.ae\ngoogle.al\ngoogle.am\ngoogle.as\ngoogle.at\ngoogle.az\ngoogle.ba\ngoogle.be\ngoogle.bf\ngoogle.bg\ngoogle.bi\ngoogle.bj\ngoogle.bs\ngoogle.bt\ngoogle.by\ngoogle.ca\ngoogle.cat\ngoogle.cc\ngoogle.cd\ngoogle.cf\ngoogle.cg\ngoogle.ch\ngoogle.ci\ngoogle.cl\ngoogle.cm\ngoogle.cn\ngoogle.co.ao\ngoogle.co.bw\ngoogle.co.ck\ngoogle.co.cr\ngoogle.co.id\ngoogle.co.il\ngoogle.co.in\ngoogle.co.jp\ngoogle.co.ke\ngoogle.co.kr\ngoogle.co.ls\ngoogle.com\ngoogle.co.ma\ngoogle.com.af\ngoogle.com.ag\ngoogle.com.ai\ngoogle.com.ar\ngoogle.com.au\ngoogle.com.bd\ngoogle.com.bh\ngoogle.com.bn\ngoogle.com.bo\ngoogle.com.br\ngoogle.com.bz\ngoogle.com.co\ngoogle.com.cu\ngoogle.com.cy\ngoogle.com.do\ngoogle.com.ec\ngoogle.com.eg\ngoogle.com.et\ngoogle.com.fj\ngoogle.com.gh\ngoogle.com.gi\ngoogle.com.gt\ngoogle.com.hk\ngoogle.com.jm\ngoogle.com.kh\ngoogle.com.kw\ngoogle.com.lb\ngoogle.com.lc\ngoogle.com.ly\ngoogle.com.mm\ngoogle.com.mt\ngoogle.com.mx\ngoogle.com.my\ngoogle.com.na\ngoogle.com.nf\ngoogle.com.ng\ngoogle.com.ni\ngoogle.com.np\ngoogle.com.om\ngoogle.com.pa\ngoogle.com.pe\ngoogle.com.pg\ngoogle.com.ph\ngoogle.com.pk\ngoogle.com.pr\ngoogle.com.py\ngoogle.com.qa\ngoogle.com.sa\ngoogle.com.sb\ngoogle.com.sg\ngoogle.com.sl\ngoogle.com.sv\ngoogle.com.tj\ngoogle.com.tr\ngoogle.com.tw\ngoogle.com.ua\ngoogle.com.uy\ngoogle.com.vc\ngoogle.com.vn\ngoogle.co.mz\ngoogle.co.nz\ngoogle.co.th\ngoogle.co.tz\ngoogle.co.ug\ngoogle.co.uk\ngoogle.co.uz\ngoogle.co.ve\ngoogle.co.vi\ngoogle.co.za\ngoogle.co.zm\ngoogle.co.zw\ngoogle.cv\ngoogle.cz\ngoogle.de\ngoogle.dj\ngoogle.dk\ngoogle.dm\ngoogle.dz\ngoogle.ee\ngoogle.es\ngoogle.fi\ngoogle.fm\ngoogle.fr\ngoogle.ga\ngoogle.ge\ngoogle.gf\ngoogle.gg\ngoogle.gl\ngoogle.gm\ngoogle.gp\ngoogle.gr\ngoogle.gy\ngoogle.hn\ngoogle.hr\ngoogle.ht\ngoogle.hu\ngoogle.ie\ngoogle.im\ngoogle.io\ngoogle.iq\ngoogle.is\ngoogle.it\ngoogle.je\ngoogle.jo\ngoogle.kg\ngoogle.ki\ngoogle.kz\ngoogle.la\ngoogle.li\ngoogle.lk\ngoogle.lt\ngoogle.lu\ngoogle.lv\ngoogle.md\ngoogle.me\ngoogle.mg\ngoogle.mk\ngoogle.ml\ngoogle.mn\ngoogle.ms\ngoogle.mu\ngoogle.mv\ngoogle.mw\ngoogle.ne\ngoogle.net\ngoogle.nl\ngoogle.no\ngoogle.nr\ngoogle.nu\ngoogle.org\ngoogle.pl\ngoogle.pn\ngoogle.ps\ngoogle.pt\ngoogle.ro\ngoogle.rs\ngoogle.ru\ngoogle.rw\ngoogle.sc\ngoogle.se\ngoogle.sh\ngoogle.si\ngoogle.sk\ngoogle.sm\ngoogle.sn\ngoogle.so\ngoogle.sr\ngoogle.st\ngoogle.td\ngoogle.tg\ngoogle.tk\ngoogle.tl\ngoogle.tm\ngoogle.tn\ngoogle.to\ngoogle.tt\ngoogle.vg\ngoogle.vu\ngoogle.ws\n"
          }
          
          base64 -d       </dev/null &>/dev/null && base64_decode='base64 -d'
          base64 --decode </dev/null &>/dev/null && base64_decode='base64 --decode'
          [ "$base64_decode" ] || { echo "option not supported: base64 -d/--decode"; exit 1; }
          
          mkdir -p ${{ github.workspace }}/resource
          mkdir -p ${{ github.workspace }}/tmp
          mkdir -p ${{ github.workspace }}/release
          
          wget -q ${{ env.MOSDNS }} -O ${{ github.workspace }}/mosdns.zip
          unzip -q -d ${{ github.workspace }}/mosdns-master ${{ github.workspace }}/mosdns.zip
          
          mv ${{ github.workspace }}/mosdns-master/mosdns ${{ github.workspace }}/mosdns 
          chmod 755 ${{ github.workspace }}/mosdns
          
          wget -q ${{ env.GEOIP }} -O ${{ github.workspace }}/resource/geoip.dat
          echo "download geoip.dat"
          
          wget -q ${{ env.GEOSITE }} -O ${{ github.workspace }}/resource/geosite.dat
          echo "download geosite.dat"
          
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:geolocation-!cn >/dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:cn >/dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:gfw >/dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:greatfire >/dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-ip-dat ${{ github.workspace }}/resource/geoip.dat:cn > /dev/null 2>&1

          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:category-ads-all > /dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:win-spy > /dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:win-extra > /dev/null 2>&1
          ${{ github.workspace }}/mosdns -conv-v2ray-domain-dat ${{ github.workspace }}/resource/geosite.dat:win-update > /dev/null 2>&1
          
          echo "download gfwlist.txt"
          gfwlist_tmp=$(wget -qO- ${{ env.GFWLIST }})
          
          echo "download accelerated-domains.china.conf"
          chnlist_tmp=$(wget -qO- ${{ env.CHNLIST }} | awk -F/ '{print $2}' | sort -u)
          
          echo "download delegated-apnic-latest"
          apnic_tmp=$(wget -qO- ${{ env.APNICIP }})
          
          echo "download dbl-oisd-list"
          oisd_tmp=$(wget -qO- ${{ env.OISD }})
          
          echo "----------------------------------"
          
          echo "create Secrets"
          rkey=$(head -c 32 /dev/random | base64)
          echo "${{ secrets.MYRSA_KEY }}" > ${{ github.workspace }}/resource/rsa.key
          skey=$(echo -n "$rkey" | sudo openssl rsautl -encrypt -pubin -inkey ${{ github.workspace }}/resource/rsa.key | sudo openssl enc -A -base64)
          echo "$skey" > ${{ github.workspace }}/checkkey
          printf 'create gfwlist.txt '
          
          gfwlist_all=$(echo "$gfwlist_tmp" | $base64_decode | { perl -pe "$gfwlist_txt_perl_script_string"; gfwlist_txt_append_domain_names; };cat ${{ github.workspace }}/resource/geosite_gfw.txt;cat ${{ github.workspace }}/resource/geosite_greatfire.txt;)
          echo "$gfwlist_all" | sort -u | grep -v '\.cn$' > ${{ github.workspace }}/tmp/gfwlist.txt
          echo "$(awk '{print NR}' ${{ github.workspace }}/tmp/gfwlist.txt |tail -n1) lines"
          split -l 500000 ${{ github.workspace }}/tmp/gfwlist.txt -d -a 2 ${{ github.workspace }}/tmp/glist_
          echo "$(sha256sum ${{ github.workspace }}/tmp/gfwlist.txt | awk '{print $1}')" > ${{ github.workspace }}/glist.checksum
          ls ${{ github.workspace }}/tmp | grep glist_ > ${{ github.workspace }}/glist.filelist

          
          printf 'create chnlist.txt '
          
          chnlist_all=chnlist1=$(echo "$chnlist_tmp";cat ${{ github.workspace }}/resource/geosite_cn.txt;cat ${{ github.workspace }}/resource/geosite_geolocation-!cn.txt)
          echo "$chnlist_all" | sort -u > ${{ github.workspace }}/resource/chnlist.txt
          sort ${{ github.workspace }}/resource/chnlist.txt ${{ github.workspace }}/tmp/gfwlist.txt | uniq -d > ${{ github.workspace }}/resource/diff.txt
          echo 'regexp:.+\.cn$' >> ${{ github.workspace }}/resource/chnlist.txt
          cat ${{ github.workspace }}/resource/chnlist.txt | grep -v '\.' | grep -v '^xn--' >> ${{ github.workspace }}/resource/diff.txt
          sort ${{ github.workspace }}/resource/chnlist.txt ${{ github.workspace }}/resource/diff.txt ${{ github.workspace }}/resource/diff.txt | uniq -u >${{ github.workspace }}/tmp/chnlist.txt
          echo "$(awk '{print NR}' ${{ github.workspace }}/tmp/chnlist.txt | tail -n1) lines"
          split -l 500000 ${{ github.workspace }}/tmp/chnlist.txt -d -a 2 ${{ github.workspace }}/tmp/clist_
          echo "$(sha256sum ${{ github.workspace }}/tmp/chnlist.txt | awk '{print $1}')" > ${{ github.workspace }}/clist.checksum
          ls ${{ github.workspace }}/tmp | grep clist_ > ${{ github.workspace }}/clist.filelist
          
          
          printf 'create adslist.txt '
          
          adslist=$(printf "$oisd_tmp" | grep -v '^#';cat ${{ github.workspace }}/resource/geosite_category-ads-all.txt;cat ${{ github.workspace }}/resource/geosite_win-extra.txt;cat ${{ github.workspace }}/resource/geosite_win-spy.txt;)
          echo "$adslist" | sort -u | grep -v '^$' > ${{ github.workspace }}/tmp/adslist.txt
          echo "$(awk '{print NR}' ${{ github.workspace }}/tmp/adslist.txt | tail -n1) lines"
          split -l 500000 ${{ github.workspace }}/tmp/adslist.txt -d -a 2 ${{ github.workspace }}/tmp/alist_
          echo "$(sha256sum ${{ github.workspace }}/tmp/adslist.txt | awk '{print $1}')" > ${{ github.workspace }}/alist.checksum
          ls ${{ github.workspace }}/tmp | grep alist_ > ${{ github.workspace }}/alist.filelist
          
          
          printf 'create ipslist.txt '
          
          list1=$(cat ${{ github.workspace }}/resource/geoip_cn.txt;echo "$apnic_tmp" | grep CN | grep ipv4 | awk -F'|' '{printf("%s/%d\n", $4, 32-log($5)/log(2))}';echo "$apnic_tmp" | grep CN | grep ipv6 | awk -F'|' '{printf("%s/%d\n", $4, $5)}')
          list2=$(echo "$list1" | sort -u)
          echo "$list2" | grep -v ':' | sort -t '.' -k1,1n -k2,2n -k3,3n > ${{ github.workspace }}/tmp/ipslist.txt
          echo "$list2" | grep ':' | awk -F: '{print strtonum("0x"$1),strtonum("0x"$2),$0}' | sort -k1,1n -k2,2n | awk '{print $3}' >> ${{ github.workspace }}/tmp/ipslist.txt
          echo "$(awk '{print NR}' ${{ github.workspace }}/tmp/ipslist.txt | tail -n1) lines"
          split -l 500000 ${{ github.workspace }}/tmp/ipslist.txt -d -a 2 ${{ github.workspace }}/tmp/ilist_
          echo "$(sha256sum ${{ github.workspace }}/tmp/ipslist.txt | awk '{print $1}')" > ${{ github.workspace }}/ilist.checksum
          ls ${{ github.workspace }}/tmp | grep ilist_ > ${{ github.workspace }}/ilist.filelist

          rm -rf ${{ github.workspace }}/tmp/gfwlist.txt
          rm -rf ${{ github.workspace }}/tmp/chnlist.txt
          rm -rf ${{ github.workspace }}/tmp/adslist.txt
          rm -rf ${{ github.workspace }}/tmp/ipslist.txt

          echo "----------------------------------"          
          filelist=$(ls ${{ github.workspace }}/tmp/)
          for file in $filelist
          do
            sudo openssl enc -aes-256-ofb -k "$rkey" -md sha512 -pbkdf2 -iter 100000 -salt -e -in ${{ github.workspace }}/tmp/$file -out ${{ github.workspace }}/release/$file
          done
          
          rm -rf ${{ github.workspace }}/tmp
          rm -rf ${{ github.workspace }}/resource
          rm -rf ${{ github.workspace }}/mosdns.zip
          rm -rf ${{ github.workspace }}/mosdns
          rm -rf ${{ github.workspace }}/mosdns-master
          
          ls ${{ github.workspace }}
          echo "----------------------------------"
          ls ${{ github.workspace }}/release
          echo "::set-output name=status::success"

      - name: Generate release tag
        id: tag
        if: steps.update.outputs.status == 'success' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          echo "::set-output name=status::success"
          
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ github.workspace }}/release/*
      
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        if: steps.update.outputs.status == 'success' && !cancelled()
        with:
          retain_days: 1
          keep_minimum_runs: 3
          
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: steps.update.outputs.status == 'success' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Push commit
        run: |
          git config --global user.name "secrets.USERNAME"
          git config --global user.email "secrets.USEREMAIL"
          git add -A
          git commit -am "Automated report"
          git push